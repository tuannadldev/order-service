// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/order/order.proto

package order

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on ShopItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShopItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShopItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShopItemMultiError, or nil
// if none found.
func (m *ShopItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ShopItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Quantity

	// no validation rules for Price

	if len(errors) > 0 {
		return ShopItemMultiError(errors)
	}

	return nil
}

// ShopItemMultiError is an error wrapping multiple validation errors returned
// by ShopItem.ValidateAll() if the designated constraints aren't met.
type ShopItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopItemMultiError) AllErrors() []error { return m }

// ShopItemValidationError is the validation error returned by
// ShopItem.Validate if the designated constraints aren't met.
type ShopItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopItemValidationError) ErrorName() string { return "ShopItemValidationError" }

// Error satisfies the builtin error interface
func (e ShopItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopItemValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	for idx, item := range m.GetShopItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("ShopItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderValidationError{
						field:  fmt.Sprintf("ShopItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderValidationError{
					field:  fmt.Sprintf("ShopItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Paid

	// no validation rules for Submitted

	// no validation rules for Completed

	// no validation rules for Canceled

	// no validation rules for TotalPrice

	// no validation rules for AccountEmail

	// no validation rules for CancelReason

	// no validation rules for DeliveryAddress

	// no validation rules for DeliveryTimestamp

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on CreateOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOrderReqMultiError,
// or nil if none found.
func (m *CreateOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountEmail

	for idx, item := range m.GetShopItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateOrderReqValidationError{
						field:  fmt.Sprintf("ShopItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateOrderReqValidationError{
						field:  fmt.Sprintf("ShopItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateOrderReqValidationError{
					field:  fmt.Sprintf("ShopItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DeliveryAddress

	if len(errors) > 0 {
		return CreateOrderReqMultiError(errors)
	}

	return nil
}

// CreateOrderReqMultiError is an error wrapping multiple validation errors
// returned by CreateOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderReqMultiError) AllErrors() []error { return m }

// CreateOrderReqValidationError is the validation error returned by
// CreateOrderReq.Validate if the designated constraints aren't met.
type CreateOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderReqValidationError) ErrorName() string { return "CreateOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderReqValidationError{}

// Validate checks the field values on CreateOrderRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOrderResMultiError,
// or nil if none found.
func (m *CreateOrderRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	if len(errors) > 0 {
		return CreateOrderResMultiError(errors)
	}

	return nil
}

// CreateOrderResMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRes.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResMultiError) AllErrors() []error { return m }

// CreateOrderResValidationError is the validation error returned by
// CreateOrderRes.Validate if the designated constraints aren't met.
type CreateOrderResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResValidationError) ErrorName() string { return "CreateOrderResValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrderResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResValidationError{}

// Validate checks the field values on PayOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayOrderReqMultiError, or
// nil if none found.
func (m *PayOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PayOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PayOrderReqValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PayOrderReqValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PayOrderReqValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PayOrderReqMultiError(errors)
	}

	return nil
}

// PayOrderReqMultiError is an error wrapping multiple validation errors
// returned by PayOrderReq.ValidateAll() if the designated constraints aren't met.
type PayOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayOrderReqMultiError) AllErrors() []error { return m }

// PayOrderReqValidationError is the validation error returned by
// PayOrderReq.Validate if the designated constraints aren't met.
type PayOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayOrderReqValidationError) ErrorName() string { return "PayOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e PayOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayOrderReqValidationError{}

// Validate checks the field values on PayOrderRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PayOrderRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PayOrderRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PayOrderResMultiError, or
// nil if none found.
func (m *PayOrderRes) ValidateAll() error {
	return m.validate(true)
}

func (m *PayOrderRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	if len(errors) > 0 {
		return PayOrderResMultiError(errors)
	}

	return nil
}

// PayOrderResMultiError is an error wrapping multiple validation errors
// returned by PayOrderRes.ValidateAll() if the designated constraints aren't met.
type PayOrderResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayOrderResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayOrderResMultiError) AllErrors() []error { return m }

// PayOrderResValidationError is the validation error returned by
// PayOrderRes.Validate if the designated constraints aren't met.
type PayOrderResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayOrderResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayOrderResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayOrderResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayOrderResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayOrderResValidationError) ErrorName() string { return "PayOrderResValidationError" }

// Error satisfies the builtin error interface
func (e PayOrderResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayOrderRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayOrderResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayOrderResValidationError{}

// Validate checks the field values on SubmitOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmitOrderReqMultiError,
// or nil if none found.
func (m *SubmitOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	if len(errors) > 0 {
		return SubmitOrderReqMultiError(errors)
	}

	return nil
}

// SubmitOrderReqMultiError is an error wrapping multiple validation errors
// returned by SubmitOrderReq.ValidateAll() if the designated constraints
// aren't met.
type SubmitOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitOrderReqMultiError) AllErrors() []error { return m }

// SubmitOrderReqValidationError is the validation error returned by
// SubmitOrderReq.Validate if the designated constraints aren't met.
type SubmitOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitOrderReqValidationError) ErrorName() string { return "SubmitOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e SubmitOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitOrderReqValidationError{}

// Validate checks the field values on SubmitOrderRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubmitOrderRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitOrderRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmitOrderResMultiError,
// or nil if none found.
func (m *SubmitOrderRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitOrderRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	if len(errors) > 0 {
		return SubmitOrderResMultiError(errors)
	}

	return nil
}

// SubmitOrderResMultiError is an error wrapping multiple validation errors
// returned by SubmitOrderRes.ValidateAll() if the designated constraints
// aren't met.
type SubmitOrderResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitOrderResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitOrderResMultiError) AllErrors() []error { return m }

// SubmitOrderResValidationError is the validation error returned by
// SubmitOrderRes.Validate if the designated constraints aren't met.
type SubmitOrderResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitOrderResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitOrderResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitOrderResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitOrderResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitOrderResValidationError) ErrorName() string { return "SubmitOrderResValidationError" }

// Error satisfies the builtin error interface
func (e SubmitOrderResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitOrderRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitOrderResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitOrderResValidationError{}

// Validate checks the field values on GetOrderByIDReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByIDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByIDReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByIDReqMultiError, or nil if none found.
func (m *GetOrderByIDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByIDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	if len(errors) > 0 {
		return GetOrderByIDReqMultiError(errors)
	}

	return nil
}

// GetOrderByIDReqMultiError is an error wrapping multiple validation errors
// returned by GetOrderByIDReq.ValidateAll() if the designated constraints
// aren't met.
type GetOrderByIDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByIDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByIDReqMultiError) AllErrors() []error { return m }

// GetOrderByIDReqValidationError is the validation error returned by
// GetOrderByIDReq.Validate if the designated constraints aren't met.
type GetOrderByIDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByIDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByIDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByIDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByIDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByIDReqValidationError) ErrorName() string { return "GetOrderByIDReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderByIDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByIDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByIDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByIDReqValidationError{}

// Validate checks the field values on GetOrderByIDRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByIDRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByIDRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByIDResMultiError, or nil if none found.
func (m *GetOrderByIDRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByIDRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderByIDResValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderByIDResValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByIDResValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderByIDResMultiError(errors)
	}

	return nil
}

// GetOrderByIDResMultiError is an error wrapping multiple validation errors
// returned by GetOrderByIDRes.ValidateAll() if the designated constraints
// aren't met.
type GetOrderByIDResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByIDResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByIDResMultiError) AllErrors() []error { return m }

// GetOrderByIDResValidationError is the validation error returned by
// GetOrderByIDRes.Validate if the designated constraints aren't met.
type GetOrderByIDResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByIDResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByIDResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByIDResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByIDResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByIDResValidationError) ErrorName() string { return "GetOrderByIDResValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderByIDResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByIDRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByIDResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByIDResValidationError{}

// Validate checks the field values on UpdateShoppingCartReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShoppingCartReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShoppingCartReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShoppingCartReqMultiError, or nil if none found.
func (m *UpdateShoppingCartReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShoppingCartReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	for idx, item := range m.GetShopItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateShoppingCartReqValidationError{
						field:  fmt.Sprintf("ShopItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateShoppingCartReqValidationError{
						field:  fmt.Sprintf("ShopItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateShoppingCartReqValidationError{
					field:  fmt.Sprintf("ShopItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateShoppingCartReqMultiError(errors)
	}

	return nil
}

// UpdateShoppingCartReqMultiError is an error wrapping multiple validation
// errors returned by UpdateShoppingCartReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateShoppingCartReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShoppingCartReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShoppingCartReqMultiError) AllErrors() []error { return m }

// UpdateShoppingCartReqValidationError is the validation error returned by
// UpdateShoppingCartReq.Validate if the designated constraints aren't met.
type UpdateShoppingCartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShoppingCartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShoppingCartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShoppingCartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShoppingCartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShoppingCartReqValidationError) ErrorName() string {
	return "UpdateShoppingCartReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShoppingCartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShoppingCartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShoppingCartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShoppingCartReqValidationError{}

// Validate checks the field values on UpdateShoppingCartRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShoppingCartRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShoppingCartRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShoppingCartResMultiError, or nil if none found.
func (m *UpdateShoppingCartRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShoppingCartRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShoppingCartResMultiError(errors)
	}

	return nil
}

// UpdateShoppingCartResMultiError is an error wrapping multiple validation
// errors returned by UpdateShoppingCartRes.ValidateAll() if the designated
// constraints aren't met.
type UpdateShoppingCartResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShoppingCartResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShoppingCartResMultiError) AllErrors() []error { return m }

// UpdateShoppingCartResValidationError is the validation error returned by
// UpdateShoppingCartRes.Validate if the designated constraints aren't met.
type UpdateShoppingCartResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShoppingCartResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShoppingCartResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShoppingCartResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShoppingCartResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShoppingCartResValidationError) ErrorName() string {
	return "UpdateShoppingCartResValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShoppingCartResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShoppingCartRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShoppingCartResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShoppingCartResValidationError{}

// Validate checks the field values on CancelOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelOrderReqMultiError,
// or nil if none found.
func (m *CancelOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	// no validation rules for CancelReason

	if len(errors) > 0 {
		return CancelOrderReqMultiError(errors)
	}

	return nil
}

// CancelOrderReqMultiError is an error wrapping multiple validation errors
// returned by CancelOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CancelOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderReqMultiError) AllErrors() []error { return m }

// CancelOrderReqValidationError is the validation error returned by
// CancelOrderReq.Validate if the designated constraints aren't met.
type CancelOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderReqValidationError) ErrorName() string { return "CancelOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderReqValidationError{}

// Validate checks the field values on CancelOrderRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelOrderRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelOrderResMultiError,
// or nil if none found.
func (m *CancelOrderRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelOrderResMultiError(errors)
	}

	return nil
}

// CancelOrderResMultiError is an error wrapping multiple validation errors
// returned by CancelOrderRes.ValidateAll() if the designated constraints
// aren't met.
type CancelOrderResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderResMultiError) AllErrors() []error { return m }

// CancelOrderResValidationError is the validation error returned by
// CancelOrderRes.Validate if the designated constraints aren't met.
type CancelOrderResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderResValidationError) ErrorName() string { return "CancelOrderResValidationError" }

// Error satisfies the builtin error interface
func (e CancelOrderResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderResValidationError{}

// Validate checks the field values on CompleteOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompleteOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteOrderReqMultiError, or nil if none found.
func (m *CompleteOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	// no validation rules for DeliveryTimestamp

	if len(errors) > 0 {
		return CompleteOrderReqMultiError(errors)
	}

	return nil
}

// CompleteOrderReqMultiError is an error wrapping multiple validation errors
// returned by CompleteOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CompleteOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteOrderReqMultiError) AllErrors() []error { return m }

// CompleteOrderReqValidationError is the validation error returned by
// CompleteOrderReq.Validate if the designated constraints aren't met.
type CompleteOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteOrderReqValidationError) ErrorName() string { return "CompleteOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e CompleteOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteOrderReqValidationError{}

// Validate checks the field values on CompleteOrderRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompleteOrderRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteOrderRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteOrderResMultiError, or nil if none found.
func (m *CompleteOrderRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteOrderRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteOrderResMultiError(errors)
	}

	return nil
}

// CompleteOrderResMultiError is an error wrapping multiple validation errors
// returned by CompleteOrderRes.ValidateAll() if the designated constraints
// aren't met.
type CompleteOrderResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteOrderResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteOrderResMultiError) AllErrors() []error { return m }

// CompleteOrderResValidationError is the validation error returned by
// CompleteOrderRes.Validate if the designated constraints aren't met.
type CompleteOrderResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteOrderResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteOrderResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteOrderResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteOrderResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteOrderResValidationError) ErrorName() string { return "CompleteOrderResValidationError" }

// Error satisfies the builtin error interface
func (e CompleteOrderResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteOrderRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteOrderResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteOrderResValidationError{}

// Validate checks the field values on ChangeDeliveryAddressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDeliveryAddressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDeliveryAddressReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDeliveryAddressReqMultiError, or nil if none found.
func (m *ChangeDeliveryAddressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDeliveryAddressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateID

	// no validation rules for DeliveryAddress

	if len(errors) > 0 {
		return ChangeDeliveryAddressReqMultiError(errors)
	}

	return nil
}

// ChangeDeliveryAddressReqMultiError is an error wrapping multiple validation
// errors returned by ChangeDeliveryAddressReq.ValidateAll() if the designated
// constraints aren't met.
type ChangeDeliveryAddressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDeliveryAddressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDeliveryAddressReqMultiError) AllErrors() []error { return m }

// ChangeDeliveryAddressReqValidationError is the validation error returned by
// ChangeDeliveryAddressReq.Validate if the designated constraints aren't met.
type ChangeDeliveryAddressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDeliveryAddressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDeliveryAddressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDeliveryAddressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDeliveryAddressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDeliveryAddressReqValidationError) ErrorName() string {
	return "ChangeDeliveryAddressReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDeliveryAddressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDeliveryAddressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDeliveryAddressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDeliveryAddressReqValidationError{}

// Validate checks the field values on ChangeDeliveryAddressRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDeliveryAddressRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDeliveryAddressRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDeliveryAddressResMultiError, or nil if none found.
func (m *ChangeDeliveryAddressRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDeliveryAddressRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeDeliveryAddressResMultiError(errors)
	}

	return nil
}

// ChangeDeliveryAddressResMultiError is an error wrapping multiple validation
// errors returned by ChangeDeliveryAddressRes.ValidateAll() if the designated
// constraints aren't met.
type ChangeDeliveryAddressResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDeliveryAddressResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDeliveryAddressResMultiError) AllErrors() []error { return m }

// ChangeDeliveryAddressResValidationError is the validation error returned by
// ChangeDeliveryAddressRes.Validate if the designated constraints aren't met.
type ChangeDeliveryAddressResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDeliveryAddressResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDeliveryAddressResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDeliveryAddressResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDeliveryAddressResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDeliveryAddressResValidationError) ErrorName() string {
	return "ChangeDeliveryAddressResValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDeliveryAddressResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDeliveryAddressRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDeliveryAddressResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDeliveryAddressResValidationError{}

// Validate checks the field values on SearchReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchReqMultiError, or nil
// if none found.
func (m *SearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SearchText

	// no validation rules for Page

	// no validation rules for Size

	if len(errors) > 0 {
		return SearchReqMultiError(errors)
	}

	return nil
}

// SearchReqMultiError is an error wrapping multiple validation errors returned
// by SearchReq.ValidateAll() if the designated constraints aren't met.
type SearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchReqMultiError) AllErrors() []error { return m }

// SearchReqValidationError is the validation error returned by
// SearchReq.Validate if the designated constraints aren't met.
type SearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReqValidationError) ErrorName() string { return "SearchReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReqValidationError{}

// Validate checks the field values on SearchRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchResMultiError, or nil
// if none found.
func (m *SearchRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchResValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchResValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchResValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchResMultiError(errors)
	}

	return nil
}

// SearchResMultiError is an error wrapping multiple validation errors returned
// by SearchRes.ValidateAll() if the designated constraints aren't met.
type SearchResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchResMultiError) AllErrors() []error { return m }

// SearchResValidationError is the validation error returned by
// SearchRes.Validate if the designated constraints aren't met.
type SearchResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchResValidationError) ErrorName() string { return "SearchResValidationError" }

// Error satisfies the builtin error interface
func (e SearchResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchResValidationError{}

// Validate checks the field values on Pagination with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pagination with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginationMultiError, or
// nil if none found.
func (m *Pagination) ValidateAll() error {
	return m.validate(true)
}

func (m *Pagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for HasMore

	if len(errors) > 0 {
		return PaginationMultiError(errors)
	}

	return nil
}

// PaginationMultiError is an error wrapping multiple validation errors
// returned by Pagination.ValidateAll() if the designated constraints aren't met.
type PaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationMultiError) AllErrors() []error { return m }

// PaginationValidationError is the validation error returned by
// Pagination.Validate if the designated constraints aren't met.
type PaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationValidationError) ErrorName() string { return "PaginationValidationError" }

// Error satisfies the builtin error interface
func (e PaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationValidationError{}
